<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mall4j.cloud.user.mapper.UserBalanceLogMapper">
  <resultMap id="userBalanceLogMap" type="com.mall4j.cloud.user.model.UserBalanceLog">
    <id column="balance_log_id" property="balanceLogId" />
    <result column="create_time" property="createTime"/>
    <result column="update_time" property="updateTime"/>
    <result column="user_id" property="userId"/>
    <result column="recharge_id" property="rechargeId"/>
    <result column="change_balance" property="changeBalance"/>
    <result column="io_type" property="ioType"/>
    <result column="pay_id" property="payId"/>
    <result column="type" property="type"/>
    <result column="is_payed" property="isPayed"/>
    <result column="refund_id" property="refundId"/>
  </resultMap>
  <sql id="Vo_Column_List">
    `balance_log_id`,`create_time`,`update_time`,`user_id`,`change_balance`,`io_type`,`pay_id`,`type`,`is_payed`,`recharge_id`,`refund_id`
  </sql>
  <select id="list" resultMap="userBalanceLogMap">
    select <include refid="Vo_Column_List"/> from user_balance_log order by balance_log_id desc
  </select>
  <select id="getByBalanceLogId" resultMap="userBalanceLogMap">
    select
    <include refid="Vo_Column_List"/>
    from user_balance_log where balance_log_id = #{balanceLogId}
  </select>
  <select id="listByUserId" resultType="com.mall4j.cloud.user.vo.UserBalanceLogVO">
    select <include refid="Vo_Column_List"/> from user_balance_log
    where user_id = #{userId}
    <!-- 1,3 连个类型需要充值后，才可以显示给前端   -->
    AND (`type` NOT IN (1,3) OR (`type` IN(1,3) AND is_payed != 0))
    order by balance_log_id desc
    limit #{page.begin}, #{page.size}
  </select>
  <select id="countByUserId" resultType="java.lang.Long">
    select count(1) from user_balance_log
    where user_id = #{userId} AND (`type` NOT IN (1,3) OR (`type` IN(1,3) AND is_payed != 0))
  </select>
  <insert id="save" useGeneratedKeys="true" keyProperty="balanceLogId">
    insert into user_balance_log (`user_id`,`recharge_id`,`change_balance`,`io_type`,`pay_id`,`type`,`is_payed`,`refund_id`)
    values (#{userBalanceLog.userId},#{userBalanceLog.rechargeId},#{userBalanceLog.changeBalance},#{userBalanceLog.ioType},#{userBalanceLog.payId},#{userBalanceLog.type},#{userBalanceLog.isPayed},#{userBalanceLog.refundId});
  </insert>
  <insert id="saveBatch" parameterType="java.util.List">
    insert into user_balance_log (`user_id`,`change_balance`,`io_type`,`pay_id`,`type`,`is_payed`)
    values
    <foreach collection="userBalanceLogs" item="userBalanceLog" separator=",">
      (#{userBalanceLog.userId},#{userBalanceLog.changeBalance},#{userBalanceLog.ioType},#{userBalanceLog.payId},#{userBalanceLog.type},#{userBalanceLog.isPayed})
    </foreach>
  </insert>
  <update id="update">
    update user_balance_log
    <set>
      <if test="userBalanceLog.userId != null">
        `user_id` = #{userBalanceLog.userId},
      </if>
      <if test="userBalanceLog.changeBalance != null">
        `change_balance` = #{userBalanceLog.changeBalance},
      </if>
      <if test="userBalanceLog.ioType != null">
        `io_type` = #{userBalanceLog.ioType},
      </if>
      <if test="userBalanceLog.payId != null">
        `pay_id` = #{userBalanceLog.payId},
      </if>
      <if test="userBalanceLog.type != null">
        `type` = #{userBalanceLog.type},
      </if>
      <if test="userBalanceLog.isPayed != null">
        `is_payed` = #{userBalanceLog.isPayed},
      </if>
      <if test="userBalanceLog.refundId != null">
        `refund_id` = #{userBalanceLog.refundId},
      </if>
    </set>
    where balance_log_id = #{userBalanceLog.balanceLogId}
  </update>
  <delete id="deleteById">
    delete from user_balance_log where balance_log_id = #{balanceLogId}
  </delete>

  <update id="updateToSuccess">
    update user_balance_log set is_payed = 1,pay_id = #{payId} where balance_log_id = #{balanceLogId} and is_payed = 0
  </update>

  <select id="getByPayId" resultMap="userBalanceLogMap">
    select * from user_balance_log where pay_id = #{payId}
  </select>
    <select id="listUserIdByRechargeAmount" resultType="java.lang.Long">
      SELECT user_id FROM `user_balance_log`
      WHERE is_payed = #{isPayed} AND `type` = 1
      <if test="startDate != null">
        AND create_time BETWEEN #{startDate}
      </if>
      <if test="endDate != null">
        AND #{endDate}
      </if>
      GROUP BY user_id
      HAVING SUM(change_balance) BETWEEN #{minAmount} AND #{maxAmount}
    </select>
  <select id="listUserIdByRechargeNum" resultType="java.lang.Long">
    SELECT user_id FROM `user_balance_log`
    WHERE is_payed = #{isPayed} AND `type` = 1
    <if test="startDate != null">
      AND create_time BETWEEN #{startDate}
    </if>
    <if test="endDate != null">
      AND #{endDate}
    </if>
    GROUP BY user_id
    HAVING COUNT(user_id) BETWEEN #{minNum} AND #{maxNum}
  </select>

  <select id="countByRefundId" resultType="int">
    select count(*) from user_balance_log where refund_id = #{refundId}
  </select>


  <select id="countByConditions" resultType="integer">
    SELECT ifnull(COUNT(DISTINCT(ub.`user_id`)),0) FROM `user_balance_log` ub
    LEFT JOIN `user` u ON ub.`user_id` = u.`user_id`
    <where>
      u.level_type = 1  AND STATUS = 1 and ub.is_payed = 1
      <if test="param.dateTime != null">
        AND ub.update_time <![CDATA[ <= ]]> #{param.dateTime}
      </if>
      <if test="param.dateTime == null and param.startTime != null and param.endTime != null">
        AND ( ub.update_time  <![CDATA[ >= ]]> #{param.startTime} AND ub.update_time  <![CDATA[ <= ]]> #{param.endTime})
      </if>
    </where>
  </select>

</mapper>
